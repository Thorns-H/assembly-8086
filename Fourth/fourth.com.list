EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
fourth.com -- emu8086 assembler version: 4.08  
 
[ 26/10/2022  --  10:45:15 a. m. ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       name "fourth"
[   2]        :                                       
[   3]        :                                       org  100h
[   4]        :                                       
[   5]    0100:                                       .code
[   6]        :                                       
[   7]    0100: B8 00 00                              mov ax, 0
[   8]    0103: BB 00 00                              mov bx, 0
[   9]    0106: B9 00 00                              mov cx, 0
[  10]    0109: BA 00 00                              mov dx, 0
[  11]        :                                       
[  12]    010C: B8 03 10                              mov ax, 1003h
[  13]    010F: CD 10                                 int 10h
[  14]        :                                       
[  15]    0111: BA 05 07                              mov dx, 0705h
[  16]    0114: B3 9F                                 mov bl, 10011111b
[  17]    0116: B9 26 00                              mov cx, msg1_size
[  18]    0119: B0 01                                 mov al, 01b
[  19]    011B: BD 79 01                              mov bp, msg1
[  20]    011E: B4 13                                 mov ah, 13h
[  21]    0120: CD 10                                 int 10h
[  22]        :                                       
[  23]    0122: BA 05 09                              mov dx, 0905h
[  24]    0125: B9 17 00                              mov cx, msg2_size
[  25]    0128: BD 9F 01                              mov bp, msg2
[  26]    012B: CD 10                                 int 10h
[  27]        :                                       
[  28]    012D: BA 05 0A                              mov dx, 0A05h
[  29]    0130: B9 26 00                              mov cx, msg3_size
[  30]    0133: BD B6 01                              mov bp, msg3
[  31]    0136: CD 10                                 int 10h
[  32]        :                                       
[  33]    0138: BA 05 0B                              mov dx, 0B05h
[  34]    013B: B9 24 00                              mov cx, msg4_size
[  35]    013E: BD DC 01                              mov bp, msg4
[  36]    0141: CD 10                                 int 10h
[  37]        :                                       
[  38]    0143: BA 05 0C                              mov dx, 0C05h
[  39]    0146: B9 21 00                              mov cx, msg5_size
[  40]    0149: BD 00 02                              mov bp, msg5
[  41]    014C: CD 10                                 int 10h
[  42]        :                                       
[  43]    014E: 83 3E 6D 01 01                        cmp Exp, 1
[  44]    0153: 7F 07                                 jg operation
[  45]    0155: 7D 03 E9 F9 00                        jl other
[  46]        :                                       
[  47]    015A: CD 20                                 int 20h
[  48]        :                                       
[  49]    015C:                                       operation:
[  50]        :                                       
[  51]    015C: 8B 0E 6D 01                           mov cx, [Exp]
[  52]    0160: 49                                    dec cx
[  53]    0161: A1 6B 01                              mov ax, [Base]
[  54]    0164: A3 77 01                              mov [rl], ax
[  55]        :                                       
[  56]    0167: E8 B7 00                              call mult
[  57]    016A: C3                                    ret
[  58]        :                                       
[  59]    016B:                                       data:
[  60]        :                                       
[  61]    016B: 00 00                                 Base dw 0; Base a Multiplicar
[  62]    016D: 01 00                                 Exp dw 1; Exponente a Elevar la Base
[  63]    016F: 00 00                                 aux dw 0
[  64]        :                                       
[  65]    0171: 00 00 00 00                           rx dd 0
[  66]    0175: 00 00                                 rh dw 0
[  67]    0177: 00 00                                 rl dw 0
[  68]        :                                       
[  69]    0179: 53 65 63 63 69 6F 6E 20 44 30 35 20   msg1:   db "Seccion D05 - Abraham Magana Hernandez"
                2D 20 41 62 72 61 68 61 6D 20 4D 61 
                67 61 6E 61 20 48 65 72 6E 61 6E 64 
                65 7A                               
[  70]    019F: 49 6E 74 72 6F 64 75 63 65 20 74 75   msg2:   db "Introduce tus Datos en:"
                73 20 44 61 74 6F 73 20 65 6E 3A    
[  71]    01B6: 42 61 73 65 20 2D 20 20 56 61 72 69   msg3:   db "Base -  Variable de Entrada de 16 bits"
                61 62 6C 65 20 64 65 20 45 6E 74 72 
                61 64 61 20 64 65 20 31 36 20 62 69 
                74 73                               
[  72]    01DC: 45 78 70 20 2D 20 56 61 72 69 61 62   msg4:   db "Exp - Variable de Entrada de 16 bits"
                6C 65 20 64 65 20 45 6E 74 72 61 64 
                61 20 64 65 20 31 36 20 62 69 74 73 
                                                    
[  73]    0200: 52 58 20 2D 20 56 61 72 69 61 62 6C   msg5:   db "RX - Variable de Salida (32 bits)"
                65 20 64 65 20 53 61 6C 69 64 61 20 
                28 33 32 20 62 69 74 73 29          
[  74]        :                                       
[  75]    0221:                                       msg_tail:
[  76]        :                                       
[  77]        :                                       msg1_size = msg2 - msg1
[  78]        :                                       msg2_size = msg3 - msg2
[  79]        :                                       msg3_size = msg4 - msg3
[  80]        :                                       msg4_size = msg5 - msg4
[  81]        :                                       msg5_size = msg_tail - msg5
[  82]        :                                       
[  83]    0221:                                       mult:
[  84]        :                                       
[  85]    0221: A1 77 01                              mov ax, [rl]
[  86]    0224: F7 26 6B 01                           mul [Base]
[  87]    0228: A3 77 01                              mov [rl], ax
[  88]    022B: 89 16 6F 01                           mov [aux], dx
[  89]        :                                       
[  90]    022F: A1 75 01                              mov ax, [rh]
[  91]    0232: F7 26 6B 01                           mul [Base]
[  92]    0236: A3 75 01                              mov [rh], ax
[  93]        :                                       
[  94]    0239: A1 6F 01                              mov ax, [aux]
[  95]    023C: 01 06 75 01                           add [rh], ax
[  96]        :                                       
[  97]    0240: E2 DF                                 loop mult
[  98]    0242: E8 01 00                              call finish
[  99]        :                                       
[ 100]    0245: C3                                    ret
[ 101]        :                                       
[ 102]    0246:                                       finish:
[ 103]        :                                       
[ 104]    0246: A1 75 01                              mov ax, [rh]
[ 105]    0249: A3 73 01                              mov [rx + 2], ax
[ 106]    024C: A1 77 01                              mov ax, [rl]
[ 107]    024F: A3 71 01                              mov [rx], ax
[ 108]        :                                       
[ 109]    0252: C3                                    ret
[ 110]        :                                       
[ 111]    0253:                                       other:
[ 112]    0253: C7 06 71 01 01 00                     mov rx, 1
[ 113]    0259: C3                                    ret
[ 114]        :                                       
 
===================================================================================================
 




===================================================================================================
